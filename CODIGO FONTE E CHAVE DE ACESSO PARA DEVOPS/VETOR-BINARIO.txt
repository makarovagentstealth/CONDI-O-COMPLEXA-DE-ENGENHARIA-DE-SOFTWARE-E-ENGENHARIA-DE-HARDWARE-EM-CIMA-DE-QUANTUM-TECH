import numpy as np

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(np.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def generate_non_prime_complex_vector(size):
    vector = []
    for i in range(size):
        real_part = np.random.randint(1, 100)
        imag_part = np.random.randint(1, 100)
        complex_number = complex(real_part, imag_part)
        if not is_prime(real_part) or not is_prime(imag_part):
            binary_rep = format(int(complex_number.real), 'b') + format(int(complex_number.imag), 'b')
            vector.append(binary_rep)
    return vector

size = 10  # Define o tamanho do vetor
non_prime_complex_vector = generate_non_prime_complex_vector(size)
print("Vetor Binário Complexo Não Primo:", non_prime_complex_vector)
